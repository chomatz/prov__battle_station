---

- name: ensure tasks run only on selected os releases
  block:

    - name: ensure tasks run only on selected os releases
      block:

        - name: update installed packages
          ansible.builtin.package:
            name: "*"
            state: latest
          ignore_errors: true

        - name: enable epel repositories
          ansible.builtin.include_role:
            name: repo__epel

        - name: install system packages
          ansible.builtin.package:
            name: "{{ linux_station.packages.base.install }}"
            state: present

        - name: enable the grub menu
          ansible.builtin.command:
            cmd: grub2-editenv - unset menu_auto_hide
          register: cmd_grub_menu
          failed_when:
            - cmd_grub_menu is failed
            - "'No such file or directory' not in cmd_grub_menu.msg"

        - name: remove kernel args
          ansible.builtin.command:
            cmd: "grubby --remove-args='{{ item }}' --update-kernel=ALL"
          with_items:
            - crashkernel
            - quiet
            - rhgb
          register: cmd_verbose_boot
          failed_when:
            - cmd_verbose_boot is failed
            - "'No such file or directory' not in cmd_verbose_boot.msg"

        - name: disable root access on cockpit
          ansible.builtin.lineinfile:
            path: /etc/pam.d/cockpit
            line: auth requisite pam_succeed_if.so uid >= 1000
            insertafter: "#%PAM-1.0"
          notify: restart and enable cockpit

        - name: set chrony time sources
          ansible.builtin.template:
            src: templates/chrony.conf
            dest: /etc/chrony.conf
            owner: root
            group: root
            mode: '0644'
          notify: restart and enable chronyd

        - name: locate neofetch binary
          ansible.builtin.command:
            cmd: which neofetch
          changed_when: false
          register: cmd_neofetch_binary

        - name: configure neofetch to run on user login
          ansible.builtin.lineinfile:
            path: /etc/profile.d/neofetch.sh
            create: true
            state: present
            line: "{{ cmd_neofetch_binary.stdout }}"

        - name: disable selected services
          ansible.builtin.service:
            name: "{{ item }}"
            state: stopped
            enabled: false
          register: service_disabled
          failed_when:
            - service_disabled is failed
            - "'Could not find the requested service' not in service_disabled.msg"
          with_items: "{{ linux_station.services.disable }}"

        - name: enable selected services
          ansible.builtin.service:
            name: "{{ item }}"
            state: started
            enabled: true
          register: service_enabled
          failed_when:
            - service_enabled is failed
            - "'Could not find the requested service' not in service_enabled.msg"
          with_items: "{{ linux_station.services.enable }}"

      when: >
        ansible_distribution == "CentOS" or
        ansible_distribution == "Fedora" or
        ansible_distribution == "RedHat" or
        ansible_distribution == "Rocky"

    - name: generate fancy hostname
      ansible.builtin.command:
        cmd: figlet -w 256 -f small "{{ inventory_hostname }}"
      changed_when: false
      register: cmd_figlet_hostname
      delegate_to: localhost

    - name: check if /etc/motd.d exists
      ansible.builtin.stat:
        path: /etc/motd.d
      register: motd

    - name: set hostname in /etc/motd.d/hostname
      ansible.builtin.template:
        src: templates/hostname
        dest: /etc/motd.d/hostname
        owner: root
        group: root
        mode: "0644"
      when: motd.stat.exists

    - name: set hostname in /etc/motd
      ansible.builtin.template:
        src: templates/hostname
        dest: /etc/motd
        owner: root
        group: root
        mode: "0644"
      when: not motd.stat.exists

    - name: check if /etc/issue.d exists
      ansible.builtin.stat:
        path: /etc/issue.d
      register: issue

    - name: set hostname in /etc/issue.d/hostname.issue
      ansible.builtin.template:
        src: templates/hostname
        dest: /etc/issue.d/hostname.issue
        owner: root
        group: root
        mode: "0644"
      when: issue.stat.exists

    - name: set hostname in /etc/issue
      ansible.builtin.template:
        src: templates/hostname
        dest: /etc/issue
        owner: root
        group: root
        mode: "0644"
      when: not issue.stat.exists

    - name: prevent ssh disconnects from client side
      ansible.builtin.template:
        src: templates/99-ssh_keepalive.conf
        dest: /etc/ssh/ssh_config.d/99-ssh_keepalive.conf
        owner: root
        group: root
        mode: "0644"

  when: >
    ansible_distribution == "Archlinux" or
    ansible_distribution == "CentOS" or
    ansible_distribution == "Fedora" or
    ansible_distribution == "RedHat" or
    ansible_distribution == "Rocky"

...
