---

- name: ensure tasks run only on selected os releases
  block:

    - name: ensure tasks run only on selected os releases
      block:

        - name: update installed packages
          ansible.builtin.package:
            name: "*"
            state: latest
          ignore_errors: true

        - name: enable epel repositories
          ansible.builtin.include_role:
            name: repo__epel

        - name: install system packages
          ansible.builtin.package:
            name: "{{ linux_station.packages.common.install | ansible.builtin.union(linux_station.packages.base.install) }}"
            state: present

        - name: enable the grub menu
          ansible.builtin.include_role:
            name: mgmt__grub
            tasks_from: grub_settings.yml
          vars:
            grub_setting:
              - key: GRUB_HIDDEN_TIMEOUT
                value: 0
              - key: GRUB_TIMEOUT_STYLE
                value: menu
              - key: GRUB_TIMEOUT
                value: 5

        - name: remove default kernel arguments
          ansible.builtin.include_role:
            name: mgmt__grub
            tasks_from: grubby.yml
          vars:
            grubby_task: remove
            kernel_arguments:
              - crashkernel
              - quiet
              - rhgb

        - name: deploy cockpit
          ansible.builtin.include_role:
            name: prov__cockpit

        - name: deploy chrony
          ansible.builtin.include_role:
            name: prov__chrony

        - name: locate neofetch binary
          ansible.builtin.command:
            cmd: which neofetch
          changed_when: false
          register: cmd_neofetch_binary

        - name: configure neofetch to run on user login
          ansible.builtin.lineinfile:
            path: /etc/profile.d/neofetch.sh
            create: true
            state: present
            line: "{{ cmd_neofetch_binary.stdout }}"

#        - name: disable selected services
#          ansible.builtin.service:
#            name: "{{ item }}"
#            state: stopped
#            enabled: false
#          register: service_disabled
#          failed_when:
#            - service_disabled is failed
#            - "'Could not find the requested service' not in service_disabled.msg"
#          with_items: "{{ linux_station.services.disable }}"

        - name: disable services
          ansible.builtin.command:
            cmd: "systemctl disable --now {{ linux_station.services.disable | join(' ') }}"
          register: service_disabled
          failed_when:
            - service_disabled is failed
            - "'does not exist' not in service_disabled.stderr"
            - "'not loaded' not in service_disabled.stderr"

        - name: display disabled services
          ansible.builtin.debug:
            var: service_disabled
            verbosity: 1

#        - name: enable selected services
#          ansible.builtin.service:
#            name: "{{ item }}"
#            state: started
#            enabled: true
#          register: service_enabled
#          failed_when:
#            - service_enabled is failed
#            - "'Could not find the requested service' not in service_enabled.msg"
#          with_items: "{{ linux_station.services.enable }}"

        - name: enable services
          ansible.builtin.command:
            cmd: "systemctl enable --now {{ linux_station.services.enable | join(' ') }}"
          register: service_enabled
          failed_when:
            - service_enabled is failed
            - "'does not exist' not in service_enabled.stderr"

        - name: display enabled services
          ansible.builtin.debug:
            var: service_enabled
            verbosity: 1

      when: >
        ansible_distribution == "CentOS" or
        ansible_distribution == "Fedora" or
        ansible_distribution == "RedHat" or
        ansible_distribution == "Rocky"

    - name: ensure tasks run only on selected os releases
      block:

        - name: disable steamos filesystem protection
          ansible.builtin.include_role:
            name: mgmt__steam_deck
            tasks_from: steamos_readonly.yml
          vars:
            readonly_mode: disable

        - name: refresh pacman keys
          ansible.builtin.include_role:
            name: mgmt__steam_deck
            tasks_from: arch_repository.yml

        - name: remove orphaned files
          ansible.builtin.file:
            path: /etc/bind.keys
            state: absent

        - name: install system packages
          ansible.builtin.package:
            name: "{{ linux_station.packages.common.install | ansible.builtin.union(linux_station.packages.arch.install) }}"
            state: present

      when:
        - ansible_distribution == "Archlinux"
        - ansible_distribution_release == "holo"

    - name: generate fancy hostname
      ansible.builtin.command:
        cmd: figlet -w 256 -f small "{{ inventory_hostname }}"
      changed_when: false
      register: cmd_figlet_hostname
      delegate_to: localhost

    - name: check if /etc/motd.d exists
      ansible.builtin.stat:
        path: /etc/motd.d
      register: motd

    - name: set hostname in /etc/motd.d/hostname
      ansible.builtin.template:
        src: templates/hostname
        dest: /etc/motd.d/hostname
        owner: root
        group: root
        mode: "0644"
      when: motd.stat.exists

    - name: set hostname in /etc/motd
      ansible.builtin.template:
        src: templates/hostname
        dest: /etc/motd
        owner: root
        group: root
        mode: "0644"
      when: not motd.stat.exists

    - name: check if /etc/issue.d exists
      ansible.builtin.stat:
        path: /etc/issue.d
      register: issue

    - name: set hostname in /etc/issue.d/hostname.issue
      ansible.builtin.template:
        src: templates/hostname
        dest: /etc/issue.d/hostname.issue
        owner: root
        group: root
        mode: "0644"
      when: issue.stat.exists

    - name: set hostname in /etc/issue
      ansible.builtin.template:
        src: templates/hostname
        dest: /etc/issue
        owner: root
        group: root
        mode: "0644"
      when: not issue.stat.exists

    - name: prevent ssh disconnects from client side
      ansible.builtin.template:
        src: templates/99-ssh_keepalive.conf
        dest: /etc/ssh/ssh_config.d/99-ssh_keepalive.conf
        owner: root
        group: root
        mode: "0644"

    - name: enable steamos filesystem protection
      ansible.builtin.include_role:
        name: mgmt__steam_deck
        tasks_from: steamos_readonly.yml
      vars:
        readonly_mode: enable

  when: >
    (ansible_distribution == "Archlinux" and ansible_distribution_release == "holo") or
    ansible_distribution == "CentOS" or
    ansible_distribution == "Fedora" or
    ansible_distribution == "RedHat" or
    ansible_distribution == "Rocky"

...
