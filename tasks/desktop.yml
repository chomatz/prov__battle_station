---

- name: ensure tasks run only on selected os releases
  block:

    - name: ensure tasks run only on selected os releases
      block:

        - name: remove default GRUB_TERMINAL_OUTPUT
          ansible.builtin.lineinfile:
            path: /etc/default/grub
            regexp: '^.*GRUB_TERMINAL_OUTPUT="'
            state: absent

        - name: apply grub customizations
          ansible.builtin.blockinfile:
            path: /etc/default/grub
            marker: "##### {mark} grub customizations #####"
            block: |
              GRUB_TERMINAL_OUTPUT=gfxterm
              GRUB_GFXMODE={{ max_resolution }}

        - name: rebuild grub configuration
          ansible.builtin.command:
            cmd: "grub2-mkconfig -o /boot/efi/EFI/{{ ansible_distribution | lower }}/grub.cfg"

        - name: enable vivaldi repository
          ansible.builtin.yum_repository:
            name: vivaldi
            description: vivaldi web browser
            baseurl: "https://repo.vivaldi.com/stable/rpm/x86_64"
            enabled: true
            gpgcheck: true
            gpgkey: "https://repo.vivaldi.com/stable/linux_signing_key.pub"

        - name: install vivaldi browser
          ansible.builtin.package:
            name: vivaldi-stable
            state: latest

        - name:  enable spotify repository
          ansible.builtin.command:
            cmd: dnf config-manager --add-repo=https://negativo17.org/repos/epel-spotify.repo
          register: spotify_el_repo
          ignore_errors: true
          when: >
            ansible_distribution == "CentOS" or
            ansible_distribution == "RedHat" or
            ansible_distribution == "Rocky"

        - name: display epel spotify repo results
          ansible.builtin.debug:
            var: spotify_el_repo
            verbosity: 1

        - name: enable spotify repository
          ansible.builtin.command:
            cmd: dnf config-manager --add-repo=https://negativo17.org/repos/fedora-spotify.repo
          register: spotify_fedora_repo
          ignore_errors: true
          when: ansible_distribution == "Fedora"

        - name: display fedora spotify repo results
          ansible.builtin.debug:
            var: spotify_fedora_repo
            verbosity: 1

        - name: install spotify
          ansible.builtin.package:
            name: spotify-client
            state: latest
          register: spotify_package_install
          when: >
            ((spotify_el_repo.failed is defined) and (spotify_el_repo is not failed)) or
            ((spotify_fedora_repo.failed is defined) and (spotify_fedora_repo is not failed))

        - name: display spotify install results
          ansible.builtin.debug:
            var: spotify_package_install
            verbosity: 1

        - name: enable epel repositories
          ansible.builtin.include_role:
            name: repo__epel

        - name: configure anydesk repository on red hat or enterprise linux clones
          block:

           - name: set source to rhel
             ansible.builtin.set_fact:
               os_shortname: rhel

           - name: upload anydesk repository
             ansible.builtin.template:
               src: templates/anydesk.repo
               dest: "/etc/yum.repos.d/{{ ansible_distribution | lower }}-anydesk.repo"
               owner: root
               group: root
               mode: "0644"

          when: >
            ansible_distribution == "Fedora" or
            ansible_distribution == "RedHat" or
            ansible_distribution == "Rocky"

        - name: configure anydesk repository on centos or fedora
          block:

           - name: set source to ansible_distribution value
             ansible.builtin.set_fact:
               os_shortname: "{{ ansible_distribution }}"

           - name: upload anydesk repository
             ansible.builtin.template:
               src: templates/anydesk.repo
               dest: "/etc/yum.repos.d/{{ ansible_distribution | lower }}-anydesk.repo"
               owner: root
               group: root
               mode: "0644"

          when: ansible_distribution == "CentOS"

        - name: "provide error handling for anydesk's obsolete dependencies"
          block:

            - name: install anydesk
              ansible.builtin.package:
                name: anydesk
                state: latest
              register: anydesk_install

          rescue:

            - name: display anydesk install status
              ansible.builtin.debug:
                var: anydesk_install
                verbosity: 0

            #- name: install obsolete dependencies
            #  ansible.builtin.dnf:
            #    name: pangox-compat
            #    releasever: 32
            #  when:
            #    - anydesk_install is failed
            #    - "'nothing provides libgtkglext-x11-1_0-0' in anydesk_install.msg"
            #    - ansible_distribution == "Fedora"

            - name: install anydesk
              ansible.builtin.package:
                name: anydesk
                state: latest

        - name: install desktop software
          ansible.builtin.package:
            name: "{{ linux_station.packages.desktop.install }}"
            state: latest

        - name: install powerline
          ansible.builtin.package:
            name: "{{ linux_station.packages.powerline.install.base | ansible.builtin.union(linux_station.packages.powerline.install.red_hat) }}"
            state: latest

      when: >
        ansible_distribution == "CentOS" or
        ansible_distribution == "Fedora" or
        ansible_distribution == "RedHat" or
        ansible_distribution == "Rocky"

    - name: ensure tasks run only on selected os releases
      block:

        - name: disable steamos filesystem protection
          ansible.builtin.include_role:
            name: mgmt__steam_deck
            tasks_from: steamos_readonly.yml
          vars:
            readonly_mode: disable

        - name: refresh pacman keys
          ansible.builtin.include_role:
            name: mgmt__steam_deck
            tasks_from: arch_repository.yml

        - name: install powerline
          ansible.builtin.package:
            name: "{{ linux_station.packages.powerline.install.base | ansible.builtin.union(linux_station.packages.powerline.install.arch) }}"

      when:
        - ansible_distribution == "Archlinux"
        - ansible_distribution_release == "holo"

    - name: locate powerline-bash script
      ansible.builtin.shell:
        cmd: find / -name powerline.sh | grep -i bash
      changed_when: false
      register: cmd_bash_powerline

    - ansible.builtin.debug:
        var: cmd_bash_powerline
        verbosity: 1

    - name: configure powerline for bash
      ansible.builtin.template:
        src: templates/powerline-bash.sh
        dest: /etc/profile.d/powerline-bash.sh
        owner: root
        group: root
        mode: "0644"

    - name: configure powerline for tmux
      ansible.builtin.template:
        src: templates/powerline-tmux.sh
        dest: /etc/profile.d/powerline-tmux.sh
        owner: root
        group: root
        mode: "0644"

    - name: configure powerline for vim
      ansible.builtin.template:
        src: templates/powerline-vim.sh
        dest: /etc/profile.d/powerline-vim.sh
        owner: root
        group: root
        mode: "0644"

    - name: enable steamos filesystem protection
      ansible.builtin.include_role:
        name: mgmt__steam_deck
        tasks_from: steamos_readonly.yml
      vars:
        readonly_mode: enable
      when:
        - ansible_distribution == "Archlinux"
        - ansible_distribution_release == "holo"

  when: >
    (ansible_distribution == "Archlinux" and ansible_distribution_release == "holo") or
    ansible_distribution == "CentOS" or
    ansible_distribution == "Fedora" or
    ansible_distribution == "RedHat" or
    ansible_distribution == "Rocky"

...
