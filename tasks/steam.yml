---

- name: ensure tasks run only on selected os releases
  block:

    - name: enable rpfusion repositories
      ansible.builtin.include_role:
        name: repo__rpm_fusion

    - name: install steam
      ansible.builtin.package:
        name: "{{ linux_station.packages.steam.install }}"
        state: latest

    - name: "create {{ linux_station.steam.user }} user"
      ansible.builtin.user:
        name: "{{ linux_station.steam.user }}"
        home: "/home/{{ linux_station.steam.user }}"
        system: true
        groups: games,audio

    - name: fall back to using cli commands if the recursion depth limit is reached
      block:

        - name: "ensure /home/{{ linux_station.steam.user }} is owned by {{ linux_station.steam.user }}"
          ansible.builtin.file:
            path: "/home/{{ linux_station.steam.user }}"
            recurse: true
            owner: "{{ linux_station.steam.user }}"
            group: "{{ linux_station.steam.user }}"

      rescue:

        - name: "ensure /home/{{ linux_station.steam.user }} is owned by {{ linux_station.steam.user }} via chown"
          ansible.builtin.command:
            cmd: "/usr/bin/chown -R {{ linux_station.steam.user }}:{{ linux_station.steam.user }} /home/{{ linux_station.steam.user }}"

    # xbox dongle driver for linux
    - name: install xone driver dependencies
      ansible.builtin.package:
        name:
          - cabextract
          - curl
          - dkms
          - git-core
          - kernel
          - kernel-headers
        state: latest

    - name: initialize xone local directory
      ansible.builtin.file:
        path: /opt/xone
        state: absent

    - name: clone xone repository
      ansible.builtin.command:
        cmd: git clone https://github.com/medusalix/xone
        chdir: /opt

    - name: provide an error handler if the xone driver is already installed
      block:

        - name: install xone driver
          ansible.builtin.command:
            cmd: ./install.sh --release
            chdir: /opt/xone
          register: cmd_xone_install

      rescue:

        - name: uninstall existing xone driver
          ansible.builtin.command:
            cmd: ./uninstall.sh
            chdir: /opt/xone
          when:
            - cmd_xone_install is failed
            - "'already installed' in cmd_xone_install.stderr"

        - name: reinstall xone driver
          ansible.builtin.command:
            cmd: ./install.sh --release
            chdir: /opt/xone

    - name: download dongle firmware
      ansible.builtin.command:
        cmd: xone-get-firmware.sh --skip-disclaimer

    - name: below are some hacky procedures for pipewire audio sharing accross multiple users
      ansible.builtin.debug:
        msg: users that will share the pipewire-pulse socket must be members of the audio group
      delegate_to: localhost
      run_once: true

    - name: remove default pipewire-pulse socket
      ansible.builtin.lineinfile:
        path: /usr/lib/systemd/user/pipewire-pulse.socket
        regexp: '^.*ListenStream=%t/pulse/native'
        state: absent

    - name: create custom pipewire-pulse socket
      ansible.builtin.blockinfile:
        path: /usr/lib/systemd/user/pipewire-pulse.socket
        marker: "##### {mark} custom pipewire-pulse socket #####"
        insertafter: "\\[Socket\\]"
        block: |
          ExecStartPre=rm -f /tmp/pulse-socket
          ExecStopPost=rm -f /tmp/pulse-socket
          ListenStream=/tmp/pulse-socket
          SocketGroup=audio
          SocketMode=0660

    - name: create global pipewire config directory
      ansible.builtin.file:
        path: /etc/pipewire
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: create default pipewire-pulse configuration
      ansible.builtin.command:
        cmd: cp /usr/share/pipewire/pipewire-pulse.conf /etc/pipewire/.

    - name: update socket in pipewire-pulse configuration
      ansible.builtin.command:
        cmd: sed -i -e 's|#"unix:/tmp/something"|"unix:/tmp/pulse-socket"|' /etc/pipewire/pipewire-pulse.conf

    - name: set PULSE_SERVER environment variable
      ansible.builtin.copy:
        dest: /etc/profile.d/pipewire-pulse.sh
        content: "export PULSE_SERVER=/tmp/pulse-socket"

    - name: create sudoers file for running steam
      ansible.builtin.copy:
        dest: /etc/sudoers.d/steam
        content: "%games ALL=({{ linux_station.steam.user }}) NOPASSWD:SETENV: /usr/bin/steam"

    - name: create system-wide executable script
      ansible.builtin.template:
        src: templates/steam_sudo
        dest: /usr/bin/steam_sudo
        owner: root
        group: root
        mode: "0755"

    - name: create graphical application launcher
      ansible.builtin.template:
        src: templates/steam_sudo.desktop
        dest: /usr/share/applications/steam_sudo.desktop
        owner: root
        group: root
        mode: "0644"

    - name: how to run steam as a different user
      ansible.builtin.debug:
        msg: |
          1. sudo usermod -aG games,audio <your_user_name>
          2. you may need to login again for the first item to take effect
          3. xhost +; sudo -u {{ linux_station.steam.user }} PULSE_SERVER=/tmp/pulse-socket XDG_RUNTIME_DIR=/tmp/{{ linux_station.steam.user }} steam

  when: ansible_distribution == "Fedora"

...
